[bindings.swift]
module_name = "Sargon"
experimental_sendable_value_types = true

[bindings.kotlin]
package_name = "com.radixdlt.sargon"

[bindings.swift.custom_types.BagOfBytes]
type_name = "Data"
imports = ["Foundation"]
lift = "{ Data({}.map({ i8 in UInt8(bitPattern: i8) })) }()"
lower = "{ {}.map({ u8 in Int8(bitPattern: u8) }) }()"

[bindings.kotlin.custom_types.BagOfBytes]
type_name = "List<UByte>"
imports = []
lift = "{}.map({ it.toUByte() })"
lower = "{}.map({ it.toByte() })"

[bindings.swift.custom_types.Uuid]
type_name = "UUID"
imports = ["Foundation"]
lift = "UUID(uuidString: {})!"
lower = "{}.uuidString"

[bindings.kotlin.custom_types.Uuid]
type_name = "UUID"
imports = ["java.util.UUID"]
lift = "UUID.fromString({})"
lower = "{}.toString()"

[bindings.swift.custom_types.Url]
type_name = "URL"
imports = ["Foundation"]
lift = "URL(string: {})!"
lower = "String(describing: {})"

[bindings.kotlin.custom_types.Url]
type_name = "HttpUrl"
imports = ["okhttp3.HttpUrl", "okhttp3.HttpUrl.Companion.toHttpUrl"]
lift = "{}.toHttpUrl()"
lower = "{}.toString()"

[bindings.swift.custom_types.Timestamp]
type_name = "Date"
imports = ["Foundation"]
lift = """
{
    let stringToDeserialize = {} // this is UniFFIs counterpart to `$0`
    let formatter = ISO8601DateFormatter()
    let formatOptionMS = ISO8601DateFormatter.Options.withFractionalSeconds
    formatter.formatOptions.insert(formatOptionMS)
    
    func format() -> Date? {
        formatter.date(from: stringToDeserialize)
    }
    
    if let date = format() {
        return date
    }
    
    // try without fractional seconds
    formatter.formatOptions.remove(formatOptionMS)
    return format()!
}()
"""
lower = """
{ 
    let dateToSerialize = {} // this is UniFFIs counterpart to `$0`
    let formatter = ISO8601DateFormatter()
    formatter.formatOptions.insert(.withFractionalSeconds)
    return formatter.string(from: dateToSerialize)
}()
"""

[bindings.kotlin.custom_types.Timestamp]
type_name = "OffsetDateTime"
imports = ["java.time.OffsetDateTime", "java.time.format.DateTimeFormatter"]
lift = "OffsetDateTime.parse({}, DateTimeFormatter.ISO_DATE_TIME)"
lower = "{}.format(DateTimeFormatter.ISO_DATE_TIME)"
