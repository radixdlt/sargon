[workspace]
resolver = "2"
members = [
    # === FOR APP ===
    "crates/app/home-cards",
    "crates/app/radix-connect",
    "crates/app/radix-connect-models",
    "crates/app/security-center",
    "crates/app/signing-traits",
    "crates/app/key-derivation-traits",

    # === COMMON ===
    "crates/common/build-info",
    "crates/common/bytes",
    "crates/common/entity-foundation",
    "crates/common/host-info",
    "crates/common/identified-vec-of",
    "crates/common/metadata",
    "crates/common/network",
    "crates/common/numeric",
    "crates/common/short-string",

    # === CORE ===
    "crates/core/prelude",
    "crates/core/assert-json",
    "crates/core/collections",
    "crates/core/error",
    "crates/core/has-sample-values",
    "crates/core/misc",
    "crates/core/time-utils",
    "crates/core/utils",

    # === CRYPTO ===
    "crates/crypto/cap26-models",
    "crates/crypto/addresses",
    "crates/crypto/ecc",
    "crates/crypto/encryption",
    "crates/crypto/hash",
    "crates/crypto/hd",

    # === FACTORS ===
    "crates/factors/factors",
    "crates/factors/instances-provider",
    "crates/factors/keys-collector",
    "crates/factors/signatures-collector",
    "crates/factors/next-derivation-index-ephemeral",
    "crates/factors/supporting-types",

    # === GATEWAY ===
    "crates/gateway/client-and-api",
    "crates/gateway/models",

    # === PROFILE ===
    "crates/profile/logic/logic_SPLIT_ME",
    "crates/profile/models/account-for-display",
    "crates/profile/models/account-or-persona",
    "crates/profile/models/account",
    "crates/profile/models/app-preferences",
    "crates/profile/models/base-entity",
    "crates/profile/models/gateway",
    "crates/profile/models/persona-data",
    "crates/profile/models/persona",
    "crates/profile/models/profile_SPLIT_ME",
    "crates/profile/models/security-structures",
    "crates/profile/models/supporting-types",
    "crates/profile/traits/entity-by-address",

    # === SARGON - Umbrella Crate ===
    "crates/sargon",

    # === SYSTEM ===
    "crates/system/clients/clients",
    "crates/system/clients/http",
    "crates/system/drivers",
    "crates/system/sub-systems",
    "crates/system/profile-state-holder",
    "crates/system/interactors",
    "crates/system/os/accounts",
    "crates/system/os/derive-public-keys",
    "crates/system/os/factors",
    "crates/system/os/os",
    "crates/system/os/security-center",
    "crates/system/os/signing",
    "crates/system/os/transaction",

    # === TRANSACTION ===
    "crates/transaction/foundation",
    "crates/transaction/manifests",
    "crates/transaction/models",

    # === UNIFFI ===
    "crates/uniffi/uniffi_SPLIT_ME",
    "crates/uniffi/conversion-macros",
]

default-members = [
    # === FOR APP ===
    "crates/app/home-cards",
    "crates/app/radix-connect",
    "crates/app/radix-connect-models",
    "crates/app/security-center",
    "crates/app/signing-traits",
    "crates/app/key-derivation-traits",

    # === COMMON ===
    "crates/common/bytes",
    "crates/common/build-info",
    "crates/common/entity-foundation",
    "crates/common/host-info",
    "crates/common/identified-vec-of",
    "crates/common/metadata",
    "crates/common/network",
    "crates/common/numeric",
    "crates/common/short-string",

    # === CORE ===
    "crates/core/prelude",
    "crates/core/assert-json",
    "crates/core/collections",
    "crates/core/error",
    "crates/core/has-sample-values",
    "crates/core/misc",
    "crates/core/time-utils",
    "crates/core/utils",

    # === CRYPTO ===
    "crates/crypto/cap26-models",
    "crates/crypto/addresses",
    "crates/crypto/ecc",
    "crates/crypto/encryption",
    "crates/crypto/hash",
    "crates/crypto/hd",

    # === FACTORS ===
    "crates/factors/factors",
    "crates/factors/instances-provider",
    "crates/factors/keys-collector",
    "crates/factors/signatures-collector",
    "crates/factors/next-derivation-index-ephemeral",
    "crates/factors/supporting-types",

    # === GATEWAY ===
    "crates/gateway/client-and-api",
    "crates/gateway/models",

    # === PROFILE ===
    "crates/profile/logic/logic_SPLIT_ME",
    "crates/profile/models/account-for-display",
    "crates/profile/models/account-or-persona",
    "crates/profile/models/account",
    "crates/profile/models/app-preferences",
    "crates/profile/models/base-entity",
    "crates/profile/models/gateway",
    "crates/profile/models/persona-data",
    "crates/profile/models/persona",
    "crates/profile/models/profile_SPLIT_ME",
    "crates/profile/models/security-structures",
    "crates/profile/models/supporting-types",
    "crates/profile/traits/entity-by-address",

    # === SARGON - NOT included! no need ===

    # === SYSTEM ===
    "crates/system/clients/clients",
    "crates/system/clients/http",
    "crates/system/drivers",
    "crates/system/sub-systems",
    "crates/system/profile-state-holder",
    "crates/system/interactors",
    "crates/system/os/accounts",
    "crates/system/os/derive-public-keys",
    "crates/system/os/factors",
    "crates/system/os/os",
    "crates/system/os/security-center",
    "crates/system/os/signing",
    "crates/system/os/transaction",

    # === TRANSACTION ===
    "crates/transaction/foundation",
    "crates/transaction/manifests",
    "crates/transaction/models",

    # === UNIFFI ===
    # Uniffi is omitted for maximum compilation speed
    # you can `cargo check --workspace` to check it.
    # or cargo test --workspace to test it.
]

[profile.release]
incremental = false
panic = 'unwind'
codegen-units = 1

[profile.profiling]
inherits = "release"
debug = true

[workspace.dependencies]
# With `path-bases` we can simplify the path handling for internal crates:
# https://github.com/rust-lang/cargo/issues/14355#issuecomment-2573582438
# e.g.:
# core = "../crates/core"
# error = { path = "error", base = "core "}

# === FOR APP ===
home-cards = { path = "crates/app/home-cards" }
radix-connect = { path = "crates/app/radix-connect" }
radix-connect-models = { path = "crates/app/radix-connect-models" }
security-center = { path = "crates/app/security-center" }
signing-traits= { path = "crates/app/signing-traits" }
key-derivation-traits = { path = "crates/app/key-derivation-traits" }

# === COMMON ===
build-info = { path = "crates/common/build-info" }
bytes = { path = "crates/common/bytes" }
entity-foundation = { path = "crates/common/entity-foundation" }
host-info = { path = "crates/common/host-info" }
identified-vec-of = { path = "crates/common/identified-vec-of" }
metadata = { path = "crates/common/metadata" }
network = { path = "crates/common/network" }
numeric = { path = "crates/common/numeric" }
short-string = { path = "crates/common/short-string" }

# === CORE ===
prelude = { path = "crates/core/prelude" }
assert-json = { path = "crates/core/assert-json" }
core-collections = { path = "crates/core/collections" }
error = { path = "crates/core/error" }
has-sample-values = { path = "crates/core/has-sample-values" }
core-misc = { path = "crates/core/misc" }
time-utils = { path = "crates/core/time-utils" }
core-utils = { path = "crates/core/utils" }

# === CRYPTO ===
cap26-models = { path = "crates/crypto/cap26-models" }
addresses = { path = "crates/crypto/addresses" }
ecc = { path = "crates/crypto/ecc" }
encryption = { path = "crates/crypto/encryption" }
hash = { path = "crates/crypto/hash" }
hierarchical-deterministic = { path = "crates/crypto/hd" }

# === FACTORS ===
factors = { path = "crates/factors/factors" }
factor-instances-provider = { path = "crates/factors/instances-provider" }
keys-collector = { path = "crates/factors/keys-collector" }
signatures-collector = { path = "crates/factors/signatures-collector" }
next-derivation-index-ephemeral = { path = "crates/factors/next-derivation-index-ephemeral" }
factors-supporting-types = { path = "crates/factors/supporting-types" }

# === GATEWAY ===
gateway-client-and-api = { path = "crates/gateway/client-and-api" }
gateway-models = { path = "crates/gateway/models" }

# === PROFILE ===
profile-logic = { path = "crates/profile/logic/logic_SPLIT_ME" }
account-for-display = { path = "crates/profile/models/account-for-display" }
profile-account-or-persona = { path = "crates/profile/models/account-or-persona" }
profile-account = { path = "crates/profile/models/account" }
profile-app-preferences = { path = "crates/profile/models/app-preferences" }
profile-base-entity = { path = "crates/profile/models/base-entity" }
profile-gateway = { path = "crates/profile/models/gateway" }
profile-persona-data = { path = "crates/profile/models/persona-data" }
profile-persona = { path = "crates/profile/models/persona" }
profile = { path = "crates/profile/models/profile_SPLIT_ME" }
profile-security-structures = { path = "crates/profile/models/security-structures" }
profile-supporting-types = { path = "crates/profile/models/supporting-types" }
entity-by-address = { path = "crates/profile/traits/entity-by-address" }

# === SARGON - Umbrella crate ===
sargon = { path = "crates/sargon" }

# === SYSTEM ===
clients = { path = "crates/system/clients/clients" }
http-client = { path = "crates/system/clients/http" }
drivers = { path = "crates/system/drivers" }
sub-systems = { path = "crates/system/sub-systems" }
profile-state-holder = { path = "crates/system/profile-state-holder" }
interactors = { path = "crates/system/interactors" }
sargon-os-accounts = { path = "crates/system/os/accounts" }
sargon-os-derive-public-keys = { path = "crates/system/os/derive-public-keys" }
sargon-os-factors = { path = "crates/system/os/factors" }
sargon-os = { path = "crates/system/os/os" }
sargon-os-security-center = { path = "crates/system/os/security-center" }
sargon-os-signing = { path = "crates/system/os/signing" }
sargon-os-transaction = { path = "crates/system/os/transaction" }

# === TRANSACTION ===
transaction-foundation = { path = "crates/transaction/foundation" }
manifests = { path = "crates/transaction/manifests" }
transaction-models = { path = "crates/transaction/models" }

# === UNIFFI ===
sargon-uniffi = { path = "crates/uniffi/uniffi_SPLIT_ME" }
sargon-uniffi-conversion-macros = { path = "crates/uniffi/conversion-macros" }


# ==== RADIX DEPENDENCIES ====
radix-common = { git = "https://github.com/radixdlt/radixdlt-scrypto", tag = "v1.3.0", features = [
    "serde",
    "secp256k1_sign_and_validate",
] }
radix-common-derive = { git = "https://github.com/radixdlt/radixdlt-scrypto", tag = "v1.3.0" }
radix-engine = { git = "https://github.com/radixdlt/radixdlt-scrypto", tag = "v1.3.0" }
radix-engine-interface = { git = "https://github.com/radixdlt/radixdlt-scrypto", tag = "v1.3.0" }
radix-engine-toolkit = { git = "https://github.com/radixdlt/radix-engine-toolkit", rev = "2ab5b35a6cb96c9faeb98ed8df67b870336e6873" }
radix-engine-toolkit-common = { git = "https://github.com/radixdlt/radixdlt-scrypto", tag = "v1.3.0" }
radix-rust = { git = "https://github.com/radixdlt/radixdlt-scrypto", tag = "v1.3.0", features = [
    "serde",
] }
radix-transactions = { git = "https://github.com/radixdlt/radixdlt-scrypto", tag = "v1.3.0" }
sbor = { git = "https://github.com/radixdlt/radixdlt-scrypto", tag = "v1.3.0" }


# ==== EXTERNAL DEPENDENCIES ====
actix-rt = { version = "2.10.0", default-features = false, features = [
    "macros",
] }
aes-gcm = { version = "=0.10.3", default-features = false, features = [
    "aes",
    "alloc",
    "getrandom",
    "zeroize",
] }
arraystring = { version = "0.3.0", default-features = false, features = [
    "serde-traits",
] }
async-std = "1.13.0"
async-trait = { version = "0.1.79", default-features = false }
assert-json-diff = { version = "2.0.2", default-features = false }
base64 = { version = "=0.22.1" }
bip39 = { version = "=2.0.0", default-features = true, features = [
    "serde",
    "zeroize",
    "french",
] }

camino = { version = "1.0.8", default-features = false }
cargo_toml = { version = "0.15.3", default-features = false }
clap = { version = "4.5.1", default-features = false, features = [
    "std",
    "derive",
] }
derive_more = { version = "1.0.0", default-features = false, features = [
    "add",
    "as_ref",
    "debug",
    "deref",
    "deref_mut",
    "display",
    "from",
    "from_str",
    "mul",
] }
enum-as-inner = { version = "0.6.0", default-features = false }
enum-iterator = { version = "1.4.1", default-features = false }
delegate = { version = "0.12.0", default-features = false }
futures = { version = "0.3.31", default-features = false }
hex = { version = "=0.4.3", default-features = false }
hkdf = { version = "=0.12.4", default-features = false }
indexmap = { version = "2.2.5", default-features = false }
iota-crypto = { version = "=0.23.2", default-features = false, features = [
    "slip10",
    "ed25519",
    "secp256k1",
    "x25519",
] }
iso8601-timestamp = { version = "0.2.16", default-features = false, features = [
    "serde",
    "std",
] }

itertools = { version = "0.12.0", default-features = true }
k256 = { version = "=0.13.3", default-features = false }
log = { version = "0.4.20", default-features = false }
once_cell = { version = "1.19.0", default-features = false }
paste = { version = "1.0.14", default-features = false }
preinterpret = { version = "0.2.0", default-features = false }
pretty_assertions = { version = "1.4.0", default-features = false, features = [
    "std",
] }
pretty_env_logger = { version = "0.5.0", default-features = false }
rand = { version = "0.8.5", default-features = false, features = ["getrandom"] }
regex = { version = "1.9.3", default-features = false }
reqwest = { version = "0.12.3", default-features = false, features = [
    "native-tls-vendored",
] }
serde_with = { version = "3.4.0", default-features = false }
serde = { version = "1.0.193", default-features = false, features = [
    "derive",
    "rc",
    "std",
] }
serde_json = { version = "1.0.108", default-features = false, features = [
    "preserve_order",
] }
serde_repr = { version = "0.1.17", default-features = false }
strum = { version = "0.26.1", default-features = false, features = ["derive"] }
thiserror = { version = "1.0.50", default-features = false }
url = { version = "2.5.0", default-features = false, features = ["serde"] }
uniffi = { git = "https://github.com/mozilla/uniffi-rs/", rev = "9127d4d9cfb8ff8372e70f2e4e0eb36bc06f146d", features = [
    "cli",
] }
uuid = { version = "1.6.1", default-features = false, features = [
    "v4",
    "serde",
] }
zeroize = { version = "1.7.0", default-features = false, features = [
    "zeroize_derive",
    "derive",
] }
